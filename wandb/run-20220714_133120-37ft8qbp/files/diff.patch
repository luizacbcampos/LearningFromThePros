diff --git a/auxi.py b/auxi.py
index 2a2277e..d067462 100644
--- a/auxi.py
+++ b/auxi.py
@@ -665,7 +665,7 @@ def cluster_correspondence(kmeans_preds, set_3d_cvi_clean_df, cluster_name, star
 			print("Equal??", perc_gt==perc_novo)
 			return dict((v,k) for k,v in s_perc_novo.items())
 	else:
-		print("HERE")
+		# print("HERE")
 		side_df = pd.read_csv("data/events/side_1v1.csv")
 		gt = gt.merge(side_df, on='img_id')
 		df = df.merge(side_df, on='img_id')
diff --git a/gkpose.py b/gkpose.py
index 6afea5e..6011118 100644
--- a/gkpose.py
+++ b/gkpose.py
@@ -255,9 +255,11 @@ def getxSInput(df, scaler, angle, dist, up=0, cluster=0):
 
 def getXSMap(train_df, model, scaler, num_clusters, up=0, ass='Pass'):
     #Sets: Probability Map
+    print("\t-> Probability map for UP={}".format(up))
     x_range = np.linspace(90, 120.01, 50)
     y_range = np.linspace(0, 80, 50)
     xs_map = np.zeros((num_clusters, len(x_range), len(y_range)))
+
     for cluster in range(num_clusters):
         for x in range(len(x_range)):
             for y in range(len(y_range)):
diff --git a/main.py b/main.py
index 317ae14..bf25c70 100644
--- a/main.py
+++ b/main.py
@@ -210,7 +210,10 @@ def LearningSaveTechnique(sets_3d_cvi_clean, set_3d_cvi_clean_df, args, start='\
 
 		wandb.log({"KMeans 1v1 Table": auxi.make_kmeans_df(kmeans_preds, set_3d_cvi_clean_df, cluster_dict)})
 		wandb_LearningSaveTechnique(TSNE_df, c_size_d, cluster_mean_df)
-	return kmeans_preds
+
+	print(cluster_dict)
+	exit()
+	return kmeans_preds, cluster_dict
 
 def wandb_LearningSaveTechnique(TSNE_df, c_size_d, cluster_mean_df):
 
@@ -238,7 +241,7 @@ def wandb_LearningSaveTechnique(TSNE_df, c_size_d, cluster_mean_df):
 
 # 1v1 Expected Saves Model
 
-def ExpectedSavesModel_1v1(set_3d_cvi_clean_df, kmeans_preds, args, start='\t>'):
+def ExpectedSavesModel_1v1(set_3d_cvi_clean_df, kmeans_preds, cluster_dict, args, start='\t>'):
 	'''
 		1v1 Expected Saves Model
 		Factors: grid_search
@@ -282,19 +285,25 @@ def ExpectedSavesModel_1v1(set_3d_cvi_clean_df, kmeans_preds, args, start='\t>')
 	
 	y_pred = svm.predict(X_test)
 	auxi.print_classification_metrics(y_test, y_pred, start)
-	
 
 	#Calculate xS map when striker is not under pressure
-	# xs_map = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=0) #ADD
-
+	xs_map = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=0) #ADD
+	# print(xs_map)
+	best_tech_xs_map = np.argmax(xs_map, axis=0)
+	for x in range(best_tech_xs_map.shape[0]):
+		for y in range(best_tech_xs_map.shape[1]):
+			print(best_tech_xs_map[x,y], end=' ')
+		print()
+	exit()
 	#Calculate xS map for when striker is under pressure
-	# xs_map_up = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=1) #ADD
+	xs_map_up = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=1) #ADD
 
 	if args.show:
-		cluster_name = ['Aggressive Set', 'Passive Set', 'Spread', 'Smother']
-		plots.plotDoubleXSMap(xs_map, xs_map_up, cluster_name, show=args.show)
+		cluster_name = cluster_dict.keys()
+		# cluster_name = ['Aggressive Set', 'Passive Set', 'Spread', 'Smother']
+	# 	plots.plotDoubleXSMap(xs_map, xs_map_up, cluster_name, show=args.show)
 
-		#Optimal technique map
+	# 	#Optimal technique map
 		plots.plotBestTechniqueUp(xs_map, xs_map_up, cluster_name, show=args.show)
 
 	if not args.debug:
@@ -558,12 +567,12 @@ if __name__ == '__main__':
 
 	# Learning Save Technique - Unsupervised Learning
 	print("* Learning Save Technique - Unsupervised Learning *")
-	kmeans_preds = LearningSaveTechnique(sets_3d_cvi_clean, set_3d_cvi_clean_df, args)
+	kmeans_preds, cluster_dict = LearningSaveTechnique(sets_3d_cvi_clean, set_3d_cvi_clean_df, args)
 	print("---"*22)
 
 	# 1v1 Expected Saves Model
 	print("* 1v1 Expected Saves Model *")
-	train_gk_name, test_gk_name, train_df, test_df, svm = ExpectedSavesModel_1v1(set_3d_cvi_clean_df, kmeans_preds, args)
+	train_gk_name, test_gk_name, train_df, test_df, svm = ExpectedSavesModel_1v1(set_3d_cvi_clean_df, kmeans_preds, cluster_dict, args)
 	print("---"*22)
 
 	# Pro Goalkeeper Scouting
diff --git a/plots.py b/plots.py
index af3316f..603e741 100644
--- a/plots.py
+++ b/plots.py
@@ -253,7 +253,7 @@ def plotBestTechniqueUp(xs_map, xs_map_up, cluster_name, show=False):
         Best technique to use
     '''
 
-    pitch = VerticalPitch(half=True, goal_type='box', pad_bottom=-37, pad_left=-15, pad_right=-15, line_color='black', orientation='horizontal')
+    pitch = VerticalPitch(half=True, goal_type='box', pad_bottom=-37, pad_left=-15, pad_right=-15, line_color='black')#, orientation='horizontal')
     fig, ax = pitch.draw(figsize=(10,5), nrows=1, ncols=2)
     
     cmap = plt.cm.tab20
diff --git a/run_1v1.sh b/run_1v1.sh
index f6e4ed9..4c1fc60 100644
--- a/run_1v1.sh
+++ b/run_1v1.sh
@@ -2,8 +2,8 @@
 
 view_invariant1=(1 0)
 number_dim=(2 3)
-# split_side=(0 1)
-split_side=(0)
+split_side=(0 1)
+# split_side=(0)
 grid_search=(0 1)
 
 
@@ -13,7 +13,7 @@ for v1 in ${view_invariant1[@]}; do
        for gs in ${grid_search[*]}; do
            for si in ${split_side[*]}; do
                echo "python main.py -v1 $v1 -nd $nd -g $gs -si $si"
-               # python main.py -v1 $v1 -nd $nd -g $gs -si $si
+               python main.py -v1 $v1 -nd $nd -g $gs -si $si
            done
        done
    done
