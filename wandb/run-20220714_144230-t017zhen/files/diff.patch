diff --git a/auxi.py b/auxi.py
index 2a2277e..d067462 100644
--- a/auxi.py
+++ b/auxi.py
@@ -665,7 +665,7 @@ def cluster_correspondence(kmeans_preds, set_3d_cvi_clean_df, cluster_name, star
 			print("Equal??", perc_gt==perc_novo)
 			return dict((v,k) for k,v in s_perc_novo.items())
 	else:
-		print("HERE")
+		# print("HERE")
 		side_df = pd.read_csv("data/events/side_1v1.csv")
 		gt = gt.merge(side_df, on='img_id')
 		df = df.merge(side_df, on='img_id')
diff --git a/gkpose.py b/gkpose.py
index 6afea5e..367a4fb 100644
--- a/gkpose.py
+++ b/gkpose.py
@@ -255,22 +255,22 @@ def getxSInput(df, scaler, angle, dist, up=0, cluster=0):
 
 def getXSMap(train_df, model, scaler, num_clusters, up=0, ass='Pass'):
     #Sets: Probability Map
+    print("\t-> Probability map for UP={}".format(up))
     x_range = np.linspace(90, 120.01, 50)
     y_range = np.linspace(0, 80, 50)
     xs_map = np.zeros((num_clusters, len(x_range), len(y_range)))
+
     for cluster in range(num_clusters):
         for x in range(len(x_range)):
             for y in range(len(y_range)):
                 d = distance_to_goal(shooter_x=x_range[x], shooter_y=y_range[y])
                 a = goal_angle(shooter_x=x_range[x], shooter_y=y_range[y])
-                xs = []
-                for n in range(num_clusters):
-                    inp = getxSInput(train_df,scaler,angle=a,dist=d,up=up,cluster=n)
-                    xs.append(model.predict_proba(inp)[0][1])
-                mean_xs = np.mean(xs)
                 inp = getxSInput(train_df,scaler,angle=a,dist=d,up=up,cluster=cluster)
-                xs_map[cluster][x, y] = model.predict_proba(inp)[0][1] - mean_xs
+                xs_result = model.predict_proba(inp)[0][1]
+                xs_map[cluster][x, y] = xs_result # - mean_xs
         print("done cluster", cluster)
+
+    xs_map = xs_map - np.mean(xs_map, axis=0) #reduce complexity
     return xs_map
 
 def getGKEM(amateur_1v1s):
diff --git a/main.py b/main.py
index 317ae14..379dbbe 100644
--- a/main.py
+++ b/main.py
@@ -3,6 +3,7 @@ import warnings
 warnings.simplefilter(action='ignore', category=FutureWarning)
 
 # Imports
+import os
 import wandb
 import argparse
 import numpy as np
@@ -210,6 +211,12 @@ def LearningSaveTechnique(sets_3d_cvi_clean, set_3d_cvi_clean_df, args, start='\
 
 		wandb.log({"KMeans 1v1 Table": auxi.make_kmeans_df(kmeans_preds, set_3d_cvi_clean_df, cluster_dict)})
 		wandb_LearningSaveTechnique(TSNE_df, c_size_d, cluster_mean_df)
+
+	baseline = {'Aggressive Set':0, 'Passive Set':1, 'Spread':2 , 'Smother':3}
+	kmeans_preds = kmeans_preds + 4
+	replace = {k+4:baseline[v] for k,v in cluster_dict.items()}
+	for k, v in replace.items():
+		kmeans_preds = np.where(kmeans_preds==k, v, kmeans_preds)
 	return kmeans_preds
 
 def wandb_LearningSaveTechnique(TSNE_df, c_size_d, cluster_mean_df):
@@ -282,22 +289,23 @@ def ExpectedSavesModel_1v1(set_3d_cvi_clean_df, kmeans_preds, args, start='\t>')
 	
 	y_pred = svm.predict(X_test)
 	auxi.print_classification_metrics(y_test, y_pred, start)
-	
 
 	#Calculate xS map when striker is not under pressure
-	# xs_map = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=0) #ADD
+	xs_map = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=0) #ADD
+	
+	# best_tech_xs_map = np.argmax(xs_map, axis=0)
 
 	#Calculate xS map for when striker is under pressure
-	# xs_map_up = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=1) #ADD
+	xs_map_up = gk.getXSMap(train_df, svm, scaler, num_clusters=number_cluster, up=1) #ADD
 
+	cluster_name = ['Aggressive Set', 'Passive Set', 'Spread', 'Smother']
 	if args.show:
-		cluster_name = ['Aggressive Set', 'Passive Set', 'Spread', 'Smother']
 		plots.plotDoubleXSMap(xs_map, xs_map_up, cluster_name, show=args.show)
-
-		#Optimal technique map
+		# Optimal technique map
 		plots.plotBestTechniqueUp(xs_map, xs_map_up, cluster_name, show=args.show)
 
 	if not args.debug:
+		wandb.log({"XS Map": plots.plotBestTechniqueUp(xs_map, xs_map_up, cluster_name, show=args.show)})
 		wandb_ExpectedSavesModel_1v1(svm, X_test, y_test)
 
 	return train_gk_name, test_gk_name, train_df, test_df, svm
@@ -317,6 +325,14 @@ def wandb_ExpectedSavesModel_1v1(svm, X_test, y_test):
 	
 	d = {"conf_mat 1v1": cm, "Accuracy 1v1": test_set_acc, 'F1 1v1': f1, "Recall 1v1": recall, "Precision 1v1": precision}
 	wandb.log(d)
+
+	# Save to pc
+	run_type = "v1{}-nd{}-g{}-si{}".format(args.view_invariant1, args.number_dimensions, args.grid_search, args.split_sides)
+	file_number = len([name for name in os.listdir('./results') if os.path.isfile(name)])/2
+	run_type = "{}-{}.npy".format(run_type, file_number)
+	np.save("xs_map"+run_type, xs_map)
+	np.save("xs_map_up"+run_type, xs_map_up)
+	
 	return
 
 # Pro Goalkeeper Scouting
diff --git a/plots.py b/plots.py
index af3316f..6b0cb31 100644
--- a/plots.py
+++ b/plots.py
@@ -253,7 +253,7 @@ def plotBestTechniqueUp(xs_map, xs_map_up, cluster_name, show=False):
         Best technique to use
     '''
 
-    pitch = VerticalPitch(half=True, goal_type='box', pad_bottom=-37, pad_left=-15, pad_right=-15, line_color='black', orientation='horizontal')
+    pitch = VerticalPitch(half=True, goal_type='box', pad_bottom=-37, pad_left=-15, pad_right=-15, line_color='black')#, orientation='horizontal')
     fig, ax = pitch.draw(figsize=(10,5), nrows=1, ncols=2)
     
     cmap = plt.cm.tab20
@@ -274,6 +274,7 @@ def plotBestTechniqueUp(xs_map, xs_map_up, cluster_name, show=False):
     plt.tight_layout()
     if show:
         plt.show()
+    return plt
 
 def plotTSNE(pose_tsne, kmeans_preds, cluster_name, number=4, show=False):
     '''
diff --git a/run_1v1.sh b/run_1v1.sh
index f6e4ed9..efe6f9d 100644
--- a/run_1v1.sh
+++ b/run_1v1.sh
@@ -2,8 +2,7 @@
 
 view_invariant1=(1 0)
 number_dim=(2 3)
-# split_side=(0 1)
-split_side=(0)
+split_side=(0 1)
 grid_search=(0 1)
 
 
@@ -13,7 +12,7 @@ for v1 in ${view_invariant1[@]}; do
        for gs in ${grid_search[*]}; do
            for si in ${split_side[*]}; do
                echo "python main.py -v1 $v1 -nd $nd -g $gs -si $si"
-               # python main.py -v1 $v1 -nd $nd -g $gs -si $si
+               python main.py -v1 $v1 -nd $nd -g $gs -si $si
            done
        done
    done
